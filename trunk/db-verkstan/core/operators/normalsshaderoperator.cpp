#include "core/operators/normalsshaderoperator.hpp"

const BYTE g_main[] =
{
      1,   9, 255, 254, 188,   0, 
      0,   0,   0,   0,   0,   0, 
      3,   0,   0,   0,   2,   0, 
      0,   0,  96,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   4,   0,   0,   0, 
      4,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  20,   0,   0,   0, 
     87, 111, 114, 108, 100,  86, 
    105, 101, 119,  80, 114, 111, 
    106, 101,  99, 116, 105, 111, 
    110,   0,   1,   0,   0,   0, 
     16,   0,   0,   0,   4,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   2,   0,   0,   0, 
     15,   0,   0,   0,   4,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   3,   0,   0,   0, 
     80,  48,   0,   0,   7,   0, 
      0,   0,  83, 105, 109, 112, 
    108, 101,   0,   0,   1,   0, 
      0,   0,   1,   0,   0,   0, 
      3,   0,   0,   0,   3,   0, 
      0,   0,   4,   0,   0,   0, 
     32,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0,   1,   0,   0,   0, 
    168,   0,   0,   0,   0,   0, 
      0,   0,   2,   0,   0,   0, 
    146,   0,   0,   0,   0,   0, 
      0,   0, 124,   0,   0,   0, 
    120,   0,   0,   0, 147,   0, 
      0,   0,   0,   0,   0,   0, 
    148,   0,   0,   0, 144,   0, 
      0,   0,   0,   0,   0,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    255, 255, 255, 255,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    172,   0,   0,   0,   0,   2, 
    255, 255, 254, 255,  22,   0, 
     67,  84,  65,  66,  28,   0, 
      0,   0,  35,   0,   0,   0, 
      0,   2, 255, 255,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,  32,  28,   0, 
      0,   0, 112, 115,  95,  50, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  52, 
     46,  57,  53,  48,  46,  50, 
     54,  53,  54,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0,   0,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,   7, 176,   1,   0, 
      0,   2,   0,   0,   7, 128, 
      1,   0, 228, 176,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      0,   0,   0, 160,   1,   0, 
      0,   2,   0,   8,  15, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 255, 255, 
    255, 255,   0,   0,   0,   0, 
      0,   0,   0,   0,  64,   1, 
      0,   0,   0,   2, 254, 255, 
    254, 255,  52,   0,  67,  84, 
     65,  66,  28,   0,   0,   0, 
    155,   0,   0,   0,   0,   2, 
    254, 255,   1,   0,   0,   0, 
     28,   0,   0,   0,   0,   0, 
      0,  32, 148,   0,   0,   0, 
     48,   0,   0,   0,   2,   0, 
      0,   0,   4,   0,   0,   0, 
     68,   0,   0,   0,  84,   0, 
      0,   0,  87, 111, 114, 108, 
    100,  86, 105, 101, 119,  80, 
    114, 111, 106, 101,  99, 116, 
    105, 111, 110,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 115,  95,  50,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  52,  46,  57, 
     53,  48,  46,  50,  54,  53, 
     54,   0,  31,   0,   0,   2, 
      0,   0,   0, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      3,   0,   0, 128,   1,   0, 
     15, 144,   9,   0,   0,   3, 
      0,   0,   1, 192,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      2, 192,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   4, 192, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   8, 192,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   1,   0, 
      7, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};

NormalsShaderOperator::NormalsShaderOperator()
:d3d9Effect(0)
{

}

void NormalsShaderOperator::render(int tick)
{
    D3DXMATRIX projMatrix;
    D3DXMATRIX viewMatrix;
    D3DXMATRIX worldMatrix = *globalWorldMatrixStack->GetTop();
    globalDirect3DDevice->GetTransform(D3DTS_PROJECTION, &projMatrix);
    globalDirect3DDevice->GetTransform(D3DTS_VIEW, &viewMatrix);
    D3DXMATRIX worldViewProj = worldMatrix * viewMatrix * projMatrix;

    d3d9Effect->SetMatrix("WorldViewProjection", &worldViewProj);
    d3d9Effect->SetTechnique("Simple");
    UINT passes;
    d3d9Effect->Begin(&passes, 0);

    for (int i = 0; i < passes; i++) 
    {
       d3d9Effect->BeginPass(i);
       for (int i = 0; i < numberOfInputs; i++)
            getInput(i)->render(tick);
        d3d9Effect->EndPass();
    }
    
    d3d9Effect->End();
}

void NormalsShaderOperator::process()
{
    if (d3d9Effect == 0)
       D3DXCreateEffect(globalDirect3DDevice, 
                        g_main, 
                        sizeof(g_main), 
                         NULL, 
                         NULL, 
                         NULL, 
                         NULL,
                         &d3d9Effect,
                         NULL); 
}

#ifdef DB_EDITOR
void NormalsShaderOperator::deviceLost()
{
	Operator::deviceLost();
	
    if (d3d9Effect != 0)
    {
        d3d9Effect->Release();
        d3d9Effect = 0;
    }
}
#endif
